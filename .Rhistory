Ni3PO42_diff = Ni - Ni_in_Ni3PO42,
Ni3PO42_prop = Ni / Ni_in_Ni3PO42
) %>%
print()
procdata %>%
select(Ca_in_CaCO3:Ni_in_Ni3PO42) %>%
print()
#procdata %>%
plotdata <- procdata %>%
select(ends_with('_prop')) %>%
pivot_longer(
cols = everything(),
names_to = 'substance',
values_to = 'proportion'
) %>%
mutate(
substance = sub('_prop', '', substance)
) %>%
filter(
proportion != Inf
) %>%
print()
plotdata %>%
#filter(proportion < 2) %>%
mutate(
substance = as.factor(substance),
treshold_label = if_else(proportion > 1, true = '2', false = '1')
) %>%
ggplot(aes(
x = substance,
y = proportion,
fill = treshold_label
)) +
geom_boxplot() +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'red', alpha = 0.75) +
scale_y_log10() +
#facet_wrap(facets = vars(substance), scales = 'free') +
labs(
x = 'Empirical solubility compared with solubility of salt',
y = 'log(proportion)'
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45),
legend.position = 'none'
)
procdata <- empirical_data %>%
# Rename columns
rename('NH4-N' = 'N.NH4_mgL', 'NO2-N' = 'N.NO2_mgL', 'NO3-N' = 'N.NO3_mgL', 'PO4-P' = 'P.PO4_mgL', 'K' = 'K_mgL', 'Ca' = 'Ca_mgL', 'Mg' = 'Mg_mgL', 'SO4-S' = 'S.SO4_mgL', 'B' = 'B_mgL', 'Fe' = 'Fe_mgL', 'Mn' = 'Mn_mgL', 'Cu' = 'Cu_mgL', 'Zn' = 'Zn_mgL', 'Na' = 'Na_mgL', 'Mo' = 'Mo_mgL', 'Ni' = 'Ni_mgL') %>%
select(-ends_with(c('const', 'belowLimit'))) %>%
# Replace NAs by 0
mutate_at(vars(`NH4-N`, `NO2-N`, `NO3-N`), tidyr::replace_na, 0) %>%
mutate(
# Calculate Total Inorganic Nitrogen by summing NH4, NO2 and NO3
TIN = `NH4-N` + `NO2-N` + `NO3-N`,
# Calculate [PO4]
species_PO4_molL = calc_PO4(c_tot = `PO4-P`, pH = pH, form_P = "PO4-P", unit = "mg"),
# Calculate [CO3]
species_CO3_molL = calc_CO3(pH = pH, pCO2 = 0.0027),
# Calculate [OH]
species_OH_molL = calc_OH(pH = pH),
# Calculate [SO4]
species_SO4_molL = calc_SO4(c_tot = `SO4-S`, pH = pH, form_S = "SO4-S", unit = "mg")
) %>%
print()
# Read molar weight data
molarWeight <- read.csv2(file = 'data/molarWeight.csv')
#
procdata <- procdata %>%
rename('S' = 'SO4-S', 'N' = 'TIN') %>%
pivot_longer( # Convert into longtable
cols = K:N,
names_to = 'nutrient',
values_to = 'concentration_mgL'
) %>%
left_join(molarWeight, by = c('nutrient' = 'element')) %>%
mutate(
g_per_mol = as.numeric(g_per_mol), # Convert from character into numeric
concentration_molL = concentration_mgL/(1e3 * g_per_mol) # Convert from mg/L into mol/L
) %>%
select(-c(concentration_mgL, g_per_mol)) %>% # Remove unnecessary columns
pivot_wider( # Convert into widetable
names_from = 'nutrient',
values_from = 'concentration_molL'
) %>%
print()
procdata <- procdata %>%
mutate(
# CaCO3
Ca_in_CaCO3 = solubility_data$Ks0[which(solubility_data$chemFormula == "CaCO3",)] / species_CO3_molL,
Ca_found_greater_CaCO3 = Ca > Ca_in_CaCO3,
CaCO3_diff = Ca - Ca_in_CaCO3,
CaCO3_prop = Ca / Ca_in_CaCO3,
# Ca(OH)2
Ca_in_CaOH2 = solubility_data$Ks0[which(solubility_data$chemFormula == "Ca(OH)2",)] / species_OH_molL^2,
Ca_found_greater_CaOH2 = Ca > Ca_in_CaOH2,
CaOH2_diff = Ca - Ca_in_CaOH2,
CaOH2_prop = Ca / Ca_in_CaOH2,
# Ca3PO42
Ca_in_Ca3PO42 = (solubility_data$Ks0[which(solubility_data$chemFormula == "Ca3(PO4)2",)] / species_PO4_molL^2)^(1/3),
Ca_found_greater_Ca3PO42 = Ca > Ca_in_Ca3PO42,
Ca3PO42_diff = Ca - Ca_in_Ca3PO42,
Ca3PO42_prop = Ca / Ca_in_Ca3PO42,
# CaSO4
Ca_in_CaSO4 = solubility_data$Ks0[which(solubility_data$chemFormula == "CaSO4",)] / species_SO4_molL,
Ca_found_greater_CaSO4 = Ca > Ca_in_CaSO4,
CaSO4_diff = Ca - Ca_in_CaSO4,
CaSO4_prop = Ca / Ca_in_CaSO4,
# MgCO3
Mg_in_MgCO3 = solubility_data$Ks0[which(solubility_data$chemFormula == "MgCO3",)] / species_CO3_molL,
Mg_found_greater_MgCO3 = Mg > Mg_in_MgCO3,
MgCO3_diff = Mg - Mg_in_MgCO3,
MgCO3_prop = Mg / Mg_in_MgCO3,
# Mg(OH)2
Mg_in_MgOH2 = solubility_data$Ks0[which(solubility_data$chemFormula == "Mg(OH)2",)] / species_OH_molL^2,
Mg_found_greater_MgOH2 = Mg > Mg_in_MgOH2,
MgOH2_diff = Mg - Mg_in_MgOH2,
MgOH2_prop = Mg / Mg_in_MgOH2,
# Mg3PO42
Mg_in_Mg3PO42 = (solubility_data$Ks0[which(solubility_data$chemFormula == "Mg3(PO4)2",)] / species_PO4_molL^2)^(1/3),
Mg_found_greater_Mg3PO42 = Mg > Mg_in_Mg3PO42,
Mg3PO42_diff = Mg - Mg_in_Mg3PO42,
Mg3PO42_prop = Mg / Mg_in_Mg3PO42,
# FePO4
Fe_in_FePO4 = solubility_data$Ks0[which(solubility_data$chemFormula == "FePO4 x 2 H2O",)] / species_PO4_molL,
Fe_found_greater_FePO4 = Fe > Fe_in_FePO4,
FePO4_diff = Fe - Fe_in_FePO4,
FePO4_prop = Fe / Fe_in_FePO4,
# MnCO3
Mn_in_MnCO3 = solubility_data$Ks0[which(solubility_data$chemFormula == "MnCO3",)] / species_CO3_molL,
Mn_found_greater_MnCO3 = Mn > Mn_in_MnCO3,
MnCO3_diff = Mn - Mn_in_MnCO3,
MnCO3_prop = Mn / Mn_in_MnCO3,
# Cu3PO42
Cu_in_Cu3PO42 = (solubility_data$Ks0[which(solubility_data$chemFormula == "Cu3(PO4)2",)] / species_PO4_molL^2)^(1/3),
Cu_found_greater_Cu3PO42 = Cu > Cu_in_Cu3PO42,
Cu3PO42_diff = Cu - Cu_in_Cu3PO42,
Cu3PO42_prop = Cu / Cu_in_Cu3PO42,
# ZnCO3
Zn_in_ZnCO3 = solubility_data$Ks0[which(solubility_data$chemFormula == "ZnCO3",)] / species_CO3_molL,
Zn_found_greater_ZnCO3 = Zn > Zn_in_ZnCO3,
ZnCO3_diff = Zn - Zn_in_ZnCO3,
ZnCO3_prop = Zn / Zn_in_ZnCO3,
# Zn(OH)2
Zn_in_ZnOH2 = solubility_data$Ks0[which(solubility_data$chemFormula == "Zn(OH)2",)] / species_OH_molL^2,
Zn_found_greater_ZnOH2 = Zn > Zn_in_ZnOH2,
ZnOH2_diff = Zn - Zn_in_ZnOH2,
ZnOH2_prop = Zn / Zn_in_ZnOH2,
# NiCO3
Ni_in_NiCO3 = solubility_data$Ks0[which(solubility_data$chemFormula == "NiCO3",)] / species_CO3_molL,
Ni_found_greater_NiCO3 = Ni > Ni_in_NiCO3,
NiCO3_diff = Ni - Ni_in_NiCO3,
NiCO3_prop = Ni / Ni_in_NiCO3,
# Ni(OH)2
Ni_in_NiOH2 = solubility_data$Ks0[which(solubility_data$chemFormula == "Ni(OH)2",)] / species_OH_molL^2,
Ni_found_greater_NiOH2 = Ni > Ni_in_NiOH2,
NiOH2_diff = Ni - Ni_in_NiOH2,
NiOH2_prop = Ni / Ni_in_NiOH2,
# Ni3PO42
Ni_in_Ni3PO42 = (solubility_data$Ks0[which(solubility_data$chemFormula == "Ni3(PO4)2",)] / species_PO4_molL^2)^(1/3),
Ni_found_greater_Ni3PO42 = Ni > Ni_in_Ni3PO42,
Ni3PO42_diff = Ni - Ni_in_Ni3PO42,
Ni3PO42_prop = Ni / Ni_in_Ni3PO42
) %>%
print()
procdata %>%
select(Ca_in_CaCO3:Ni_in_Ni3PO42) %>%
print()
#procdata %>%
plotdata <- procdata %>%
select(ends_with('_prop')) %>%
pivot_longer(
cols = everything(),
names_to = 'substance',
values_to = 'proportion'
) %>%
mutate(
substance = sub('_prop', '', substance)
) %>%
filter(
proportion != Inf
) %>%
print()
plotdata %>%
#filter(proportion < 2) %>%
mutate(
substance = as.factor(substance),
treshold_label = if_else(proportion > 1, true = '2', false = '1')
) %>%
ggplot(aes(
x = substance,
y = proportion,
fill = treshold_label
)) +
geom_boxplot() +
geom_hline(yintercept = 1, linetype = 'dashed', color = 'red', alpha = 0.75) +
scale_y_log10() +
#facet_wrap(facets = vars(substance), scales = 'free') +
labs(
x = 'Empirical solubility compared with solubility of salt',
y = 'log(proportion)'
) +
theme_minimal() +
theme(
axis.text.x = element_text(angle = 45),
legend.position = 'none'
)
exp(Inf)
exp(0)
exp(-Inf)
knitr::opts_chunk$set(echo = TRUE)
#System
V_tot <- 10000 # System volume in L
# Animal stock
stockingDensity <- 5 # Stocking density in kg/m3
# Water
exchangeRate <- 5 # Water exchange rate in percent
waterNutrient <- 1
# Feed
feedingRate <- 2
feedNutrient <- 100
#System
V_tot <- 10000 # System volume in L
# Animal stock
stockingDensity <- 5 # Stocking density in kg/m3
# Water
exchangeRate <- 5 # Water exchange rate in percent
waterNutrient <- 1
# Feed
feedingRate <- 2
feedNutrient <- 100
# Water
V_in <- V_tot*(exchangeRate/100) # Volume of input water
m_waterNUT <- V_in*waterNutrient
# Biomass
biomass <- V_tot * stockingDensity*1e-3
# Feed
m_feed <- biomass * (feedingRate/100) # Mass of input feed
m_feedNUT <- m_feed*feedNutrient
m_in <- (m_waterNUT + m_feedNUT) # Total mass in
c_in <- m_in/V_in # Resulting concentration in
# Hydraulic retention time
HRT <- V_tot/(exchangeRate/100)
calc_C_out <- function(c_in, HRT){
c_out <- c_in * (1 - exp(-(10*HRT/HRT)))
return(c_out)
}
calc_C_out()
calc_C_out(c_in = c_in, HRT = HRT)
rm(HRT)
# Water
V_in <- V_tot*(exchangeRate/100) # Volume of input water
m_waterNUT <- V_in*waterNutrient
# Biomass
biomass <- V_tot * stockingDensity*1e-3
# Feed
m_feed <- biomass * (feedingRate/100) # Mass of input feed
m_feedNUT <- m_feed*feedNutrient
m_in <- (m_waterNUT + m_feedNUT) # Total mass in
c_in <- m_in/V_in # Resulting concentration in
# Hydraulic retention time
hrt <- V_tot/(exchangeRate/100)
calc_C_out <- function(c_in = c_in, HRT = hrt){
c_out <- c_in * (1 - exp(-(10*HRT/HRT)))
return(c_out)
}
calc_C_out()
calc_C_out(c_in = c_in, HRT = hrt)
#System
V_tot <- 10000 # System volume in L
# Animal stock
stockingDensity <- 50 # Stocking density in kg/m3
# Water
exchangeRate <- 5 # Water exchange rate in percent
waterNutrient <- 1
# Feed
feedingRate <- 2
feedNutrient <- 100
# Water
V_in <- V_tot*(exchangeRate/100) # Volume of input water
m_waterNUT <- V_in*waterNutrient
# Biomass
biomass <- V_tot * stockingDensity*1e-3
# Feed
m_feed <- biomass * (feedingRate/100) # Mass of input feed
m_feedNUT <- m_feed*feedNutrient
m_in <- (m_waterNUT + m_feedNUT) # Total mass in
c_in <- m_in/V_in # Resulting concentration in
# Hydraulic retention time
hrt <- V_tot/(exchangeRate/100)
calc_C_out(c_in = c_in, HRT = hrt)
results <- data.frame()
calc_C_out <- function(c_in = c_in, t = 5, HRT = hrt){
c_out <- c_in * (1 - exp(-(t/HRT)))
return(c_out)
}
results <- data.frame()
for(day in 1:10){
results[day,1] <- day
results[day,2] <- calc_C_out(c_in = c_in, t = day, HRT = hrt)
}
results
plot(V2~V2, data = results)
plot(V2~V1, data = results)
results <- data.frame()
for(day in 1:1000){
results[day,1] <- day
results[day,2] <- calc_C_out(c_in = c_in, t = day, HRT = hrt)
}
plot(V2~V1, data = results)
results <- data.frame()
for(day in 1:100000){
results[day,1] <- day
results[day,2] <- calc_C_out(c_in = c_in, t = day, HRT = hrt)
}
results <- data.frame()
for(day in 1:10){
results[day,1] <- day
results[day,2] <- calc_C_out(c_in = c_in, t = day, HRT = hrt)
}
results
results <- data.frame()
for(day in 1:100){
results[day,1] <- day
results[day,2] <- calc_C_out(c_in = c_in, t = day, HRT = hrt)
}
results
exo0
exp0
exp(0)
exp(1)
exp(-1)
hrt
hrt <- (exchangeRate/100)/V_tot
hrt
hrt <- V_tot*(exchangeRate/100)/V_tot
hrt
hrt
exchangeRate
exchangeRate/100
V_tot*exchangeRate/100
(V_tot*exchangeRate/100)/V_tot
1/(V_tot*exchangeRate/100)/V_tot
1/((V_tot*exchangeRate/100)/V_tot)
2/((V_tot*exchangeRate/100)/V_tot)
3/((V_tot*exchangeRate/100)/V_tot)
4/((V_tot*exchangeRate/100)/V_tot)
knitr::opts_chunk$set(echo = TRUE)
init = 3.7
hrt <- 100/20
c_in <- 1
time <- 1:50
c_out_in <- 1-exp(-(time/hrt))
c_out <- c_in*(1-exp(-(time/hrt)))
c_out2 <- (c_in+init)*(1-exp(-(time/hrt)))
plot(c_out_in~time)
plot(c_out~time, ylim = c(0,5))
points(c_out2~time, col = 'red')
abline(h = 1+init)
cat(
"Hydraulic retention time =", hrt,
"\n Initial concentration =", init
)
library(XLConnect)
library(tidyverse)
# Load Workbook
resh_hydroponic_plant_production <- loadWorkbook(filename = "/Users/anil/Library/CloudStorage/OneDrive-JihočeskáuniverzitavČeskýchBudějovicích/General/Resh - Hydroponic Plant Production.xlsx")
library(XLConnect)
library(tidyverse)
# Load Workbook
resh_hydroponic_plant_production <- loadWorkbook(filename = "/Users/anil/Library/CloudStorage/OneDrive-JihočeskáuniverzitavČeskýchBudějovicích/General/Resh - Hydroponic Plant Production.xlsx")
# Read Worksheet
# Unit: mg/L
resh_data <- readWorksheet(resh_hydroponic_plant_production, sheet = "nutrient solutions", region = c('A', 'C2:Q50'))
molarWeight <- read.csv2('data/molarWeight.csv')
resh_data <- data.frame(resh_data[[2]], row.names = resh_data[[1]][2:49,1])
resh_data <- resh_data %>%
rename('P' = 'PO4_P_mgL', 'K' = 'K_mgL', 'Ca' = 'Ca_mgL', 'Mg' = 'Mg_mgL', 'S' = 'SO4_S_mgL', 'B' = 'B_mgL', 'Fe' = 'Fe_mgL', 'Mn' = 'Mn_mgL', 'Cu' = 'Cu_mgL', 'Zn' = 'Zn_mgL', 'Na' = 'Na_mgL', 'NH4' = 'NH4_N_mgL', 'Mo' = 'Mo_mgL', 'NO3' = 'NO3_N_mgL', 'Cl' = 'Cl_mgL')
print(resh_data)
targetConc <- resh_data %>%
# Calculate total N
mutate(
N = NH4 + NO3
) %>%
select(-c('NH4', 'NO3')) %>%
# Create longtable
pivot_longer(
everything(),
names_to = 'nutrient',
values_to = 'concentration'
) %>%
# Remove missing values
drop_na() %>%
group_by(nutrient) %>%
summarise(mean_mgL = mean(concentration)) %>%
left_join(molarWeight, by = c('nutrient' = 'element')) %>%
mutate(
g_per_mol = as.numeric(g_per_mol),
mean_molL = mean_mgL * g_per_mol * 1e-3) %>%
arrange(desc(mean_molL)) %>%
print()
targetConc <- resh_data %>%
# Calculate total N
mutate(
N = NH4 + NO3
) %>%
select(-c('NH4', 'NO3')) %>%
# Create longtable
pivot_longer(
everything(),
names_to = 'nutrient',
values_to = 'concentration'
) %>%
# Remove missing values
drop_na() %>%
group_by(nutrient) %>%
summarise(mean_mgL = mean(concentration)) %>%
left_join(molarWeight, by = c('nutrient' = 'element')) %>%
mutate(
g_per_mol = as.numeric(g_per_mol),
mean_molL = mean_mgL * g_per_mol * 1e-3) %>%
arrange(desc(mean_molL)) %>%
print()
source('Nutrient Solubility/R/speciation - c_T-PO4.R')
getwd()
source('R/speciation - c_T-PO4.R')
head(targetConc)
targetConc %>%
select(c(nutrient, mean_molL)) %>%
pivot_wider(names_from = 'nutrient', values_from = 'mean_molL')
pH <- 6
targetConc %>%
select(c(nutrient, mean_molL)) %>%
pivot_wider(names_from = 'nutrient', values_from = 'mean_molL') %>%
mutate(
correctedP = calc_PO4(c_tot = P, pH = pH, form_P = 'PO4-P', unit = 'mol')
)
targetConc %>%
select(c(nutrient, mean_molL)) %>%
pivot_wider(names_from = 'nutrient', values_from = 'mean_molL') %>%
# Calculate species
mutate(
species_PO4 = calc_PO4(c_tot = P, pH = pH, form_P = 'PO4-P', unit = 'mol')
)
# PO4
source('R/speciation - c_T-PO4.R')
source('R/speciation - OH.R')
source('R/speciation - pCO2-CO3.R')
source('R/speciation - c_T-SO4.R')
targetConc %>%
select(c(nutrient, mean_molL)) %>%
pivot_wider(names_from = 'nutrient', values_from = 'mean_molL') %>%
# Calculate species
mutate(
species_PO4 = calc_PO4(c_tot = P, pH = pH, form_P = 'po4-p', unit = 'mol'),
species_OH = calc_OH(pH = pH),
species_CO3 = calc_CO3(pH = pH, pCO2 = 0.054)
)
# Read worksheet - General information
general_info <- readWorksheet(masterfile_nutrients, sheet = 'general')
# Load workbook
masterfile_nutrients <- loadWorkbook(filename = "data/Aquaponics - Masterfile Nutrients.xlsx")
# Read worksheet - General information
general_info <- readWorksheet(masterfile_nutrients, sheet = 'general')
# Read worksheet - Nutrient concentrations in pre-filtered observations
empirical_data <- readWorksheet(masterfile_nutrients, sheet = 'waterAVERAGE')
# Load preprocessed data
solubility_data <- read.csv('data/solubilityData_for3-NutrientSolubilityCorrected.csv')
#print(empirical_data)-
solubility_data <- solubility_data %>%
select(-c(X, name, cation, anion, densH2O, massPercent)) %>%
filter(!is.na(Ks0) & chemAnion != "S" & chemAnion != "SO3") %>%
filter(chemFormula != "Fe(OH)2" & chemFormula != "Fe(OH)3" & chemFormula != "FeCO3")
solubility_data
write.csv('data/solubilityData_for4-NutrientComparison.csv')
write.csv('data/solubilityData_for4-NutrientComparison.csv')
solubility_data <- solubility_data %>%
select(-c(X, name, cation, anion, densH2O, massPercent)) %>%
filter(!is.na(Ks0) & chemAnion != "S" & chemAnion != "SO3") %>%
filter(chemFormula != "Fe(OH)2" & chemFormula != "Fe(OH)3" & chemFormula != "FeCO3")
solubility_data <- read.csv('data/solubilityData_for3-NutrientSolubilityCorrected.csv')
solubility_data <- solubility_data %>%
select(-c(X, name, cation, anion, densH2O, massPercent)) %>%
filter(!is.na(Ks0) & chemAnion != "S" & chemAnion != "SO3") %>%
filter(chemFormula != "Fe(OH)2" & chemFormula != "Fe(OH)3" & chemFormula != "FeCO3")
solubility_data
write.csv('data/solubilityData_for4-NutrientComparison.csv')
write.csv2('data/solubilityData_for4-NutrientComparison.csv')
getwd()
write.csv('data/solubilityData_for4-NutrientComparison.csv')
solubility_data
solubility_data <- read.csv('data/solubilityData_for3-NutrientSolubilityCorrected.csv')
solubility_data <- solubility_data %>%
select(-c(X, name, cation, anion, densH2O, massPercent)) %>%
filter(!is.na(Ks0) & chemAnion != "S" & chemAnion != "SO3") %>%
filter(chemFormula != "Fe(OH)2" & chemFormula != "Fe(OH)3" & chemFormula != "FeCO3") %>%
select(-chemFormula)
solubility_data
write.csv('data/solubilityData_for4-NutrientComparison.csv')
solubility_data <- read.csv('data/solubilityData_for3-NutrientSolubilityCorrected.csv')
solubility_data <- solubility_data %>%
select(-c(X, name, cation, anion, densH2O, massPercent)) %>%
filter(!is.na(Ks0) & chemAnion != "S" & chemAnion != "SO3") %>%
filter(chemFormula != "Fe(OH)2" & chemFormula != "Fe(OH)3" & chemFormula != "FeCO3")
solubility_data
# Write solubility data
write.csv('data/solubilityData_for4-NutrientComparison.csv')
getwd()
write.csv(solubility_data, 'data/solubilityData_for4-NutrientComparison.csv')
read.csv('data/solubilityData_for4_NutrientComparison.csv')
getwd()
read.csv('data/solubilityData_for4-NutrientComparison.csv')
